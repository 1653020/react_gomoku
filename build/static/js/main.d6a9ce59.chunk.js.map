{"version":3,"sources":["index.js"],"names":["Square","props","className","isWinning","onClick","value","Board","i","key","this","winningSquares","includes","squares","row","j","push","renderSquare","React","Component","Game","state","Array","matrix","fill","history","xIsNext","stepNumber","isAscending","slice","length","calculateWinner","setState","concat","latestMoveSquare","step","status","current","winner","moves","map","move","col","Math","floor","desc","jumpTo","reverse","line","handleClick","handleSortToggle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6a9ce59.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nlet matrix = 20;\n\nfunction Square(props) {\n    return (\n        <button\n            className={\"square \" + (props.isWinning ? \"square--won\" : \"\")}\n            onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                key={i}\n                isWinning={this.props.winningSquares.includes(i)}\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    render() {\n        // Refactoring - Turning hard coded renderSquare to 2 for loops\n        let squares = [];\n        for (let i = 0; i < matrix; i++) {\n            let row = [];\n            for (let j = 0; j < matrix; j++) {\n                row.push(this.renderSquare(i * matrix + j));\n            }\n            squares.push(\n                <div key={i} className=\"board-row\">\n                    {row}\n                </div>\n            );\n        }\n        return <div> {squares} </div>;\n    }\n}\n\nclass Game extends React.Component {\n    state = {\n        squares: Array(matrix * matrix).fill(null),\n        history: [\n            {\n                squares: Array(matrix* matrix).fill(null)\n            }\n        ],\n        xIsNext: true,\n        stepNumber: 0,\n        isAscending: true\n    };\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n        this.setState({\n            squares: squares,\n            history: history.concat([\n                {\n                    squares: squares,\n                    latestMoveSquare: i\n                }]),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        });\n    }\n    \n    handleSortToggle() {\n        this.setState({\n            isAscending: !this.state.isAscending\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const stepNumber = this.state.stepNumber;\n        const current = history[stepNumber];\n        const winner = calculateWinner(this.state.squares);\n\n        let moves = history.map((step, move) => {\n            const latestMoveSquare = step.latestMoveSquare;\n            const col = 1 + latestMoveSquare % matrix;\n            const row = 1 + Math.floor(latestMoveSquare / matrix);\n            const desc = move ?\n                `Go to move #${move} (${col}, ${row})` :\n                'Go to game start';\n            return (\n                <li key={move}>\n                {/* Bold the currently selected item */ }\n                <button\n                    className={move === stepNumber ? 'move-list-item-selected' : ''}\n                    onClick={() => this.jumpTo(move)}>{desc}\n                </button>\n                </li>\n            );\n        });\n\n        let status;\n\n        //status win or draw\n        if (winner) {\n            status = \"Winner is \" + winner.winner;\n        } else if (!this.state.squares.includes(null)) {\n            status = \"Draw\";\n        } else {\n            status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n        }\n\n        const isAscending = this.state.isAscending;\n        if (!isAscending) {\n            moves.reverse();\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        winningSquares={winner ? winner.line : []}\n                        squares={current.squares}\n                        onClick={i => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div className=\"status\">{status}</div>\n                    <button onClick={() => this.handleSortToggle()}>\n                    {isAscending ? 'descending' : 'ascending'}\n                    </button>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction calculateWinner(squares) {\n    //check ngang\n    for (let i = 0; i < matrix; i++) {\n        for (let j = 0; j < matrix - 4; j++) {\n            if (squares[i * matrix + j] && squares[i * matrix + j] === squares[i * matrix + j + 1] && squares[i * matrix + j] === squares[i * matrix + j + 2] && squares[i * matrix + j] === squares[i * matrix + j + 3] && squares[i * matrix + j] === squares[i * matrix + j + 4]) {\n                return { winner: squares[i * matrix + j], line: [i * matrix + j, i * matrix + j + 1, i * matrix + j + 2, i * matrix + j + 3, i * matrix + j + 4] };\n            }\n        }\n    };\n\n    //check dọc\n    for (let j = 0; j < matrix; j++) {\n        for (let i = 0; i < matrix - 4; i++) {\n            if (squares[i * matrix + j] && squares[i * matrix + j] === squares[(i + 1) * matrix + j] && squares[i * matrix + j] === squares[(i + 2) * matrix + j] && squares[i * matrix + j] === squares[(i + 3) * matrix + j] && squares[i * matrix + j] === squares[(i + 4) * matrix + j]) {\n                return { winner: squares[i * matrix + j], line: [i * matrix + j, (i + 1) * matrix + j, (i + 2) * matrix + j, (i + 3) * matrix + j, (i + 4) * matrix + j] };\n            }\n        }\n    }\n\n    //check chéo phải\n    for (let i = 0; i < matrix - 4; i++) {\n        for (let j = 0; j < matrix - 4; j++) {\n            if (squares[i * matrix + j] && squares[i * matrix + j] === squares[(i + 1) * matrix + j + 1] && squares[i * matrix + j] === squares[(i + 2) * matrix + j + 2] && squares[i * matrix + j] === squares[(i + 3) * matrix + j + 3] && squares[i * matrix + j] === squares[(i + 4) * matrix + j + 4]) {\n                return { winner: squares[i * matrix + j], line: [i * matrix + j, (i + 1) * matrix + j + 1, (i + 2) * matrix + j + 2, (i + 3) * matrix + j + 3, (i + 4) * matrix + j + 4] };\n            }\n        }\n    };\n\n    //check chéo trái\n    for (let i = 0; i < matrix - 4; i++) {\n        for (let j = 4; j < matrix; j++) {\n            if (squares[i * matrix + j] && squares[i * matrix + j] === squares[(i + 1) * matrix + j - 1] && squares[i * matrix + j] === squares[(i + 2) * matrix + j - 2] && squares[i * matrix + j] === squares[(i + 3) * matrix + j - 3] && squares[i * matrix + j] === squares[(i + 4) * matrix + j - 4]) {\n                return { winner: squares[i * matrix + j], line: [i * matrix + j, (i + 1) * matrix + j - 1, (i + 2) * matrix + j - 2, (i + 3) * matrix + j - 3, (i + 4) * matrix + j - 4] };\n            }\n        }\n    };\n    return null;\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}